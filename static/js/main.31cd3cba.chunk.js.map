{"version":3,"sources":["components/Header.js","components/EmployeeList.js","utils/API.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","onChange","event","search","target","value","EmployeeList","this","users","map","employee","i","key","src","picture","thumbnail","aria-hidden","alt","name","first","last","email","cell","Component","getUsers","axios","get","Container","state","filteredUsers","term","filteredEmployees","filter","includes","setState","then","res","data","results","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQAiCeA,MA9Bf,SAAgBC,GACZ,OAEI,6BACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,eAAb,+BAKR,0BAAMA,UAAU,kBAChB,yBAAKA,UAAU,cACX,iDAAsB,8BACtB,2BAAOA,UAAU,eAAeC,GAAG,2BAA2BC,SAAU,SAACC,GAAWJ,EAAMK,OAAOD,EAAME,OAAOC,WAElH,yBAAKN,UAAU,cACX,kDAAuB,8BACvB,2BAAOA,UAAU,eAAeC,GAAG,2BAA2BC,SAAU,SAACC,GAAWJ,EAAMK,OAAOD,EAAME,OAAOC,WAElH,yBAAKN,UAAU,cACX,oDAAyB,8BACzB,2BAAOA,UAAU,eAAeC,GAAG,2BAA2BC,SAAU,SAACC,GAAWJ,EAAMK,OAAOD,EAAME,OAAOC,cC0B/GC,E,uKA/CP,OAEI,2BAAOP,UAAU,SACb,2BAAOA,UAAU,kBAEjB,8BAaA,2BAAOA,UAAU,iBAChBQ,KAAKT,MAAMU,MAAMC,KAAI,SAACC,EAAUC,GAC7B,OACQ,wBAAIZ,UAAU,UAAUa,IAAKD,GAC7B,4BAEI,yBAAKZ,UAAU,iBAAiBc,IAAKH,EAASI,QAAQC,UAAWC,eAAA,EAAYC,IAAI,WAGrF,wBAAIlB,UAAU,iBACTW,EAASQ,KAAKC,MAAQ,IAAMT,EAASQ,KAAKE,MAE/C,4BAEKV,EAASW,OAEd,4BAEKX,EAASY,gB,GAtCfC,a,iBCKZC,MAJf,WACI,OAAOC,IAAMC,IAHL,0CC0CGC,E,4MArCXC,MAAQ,CACJpB,MAAO,GACPqB,cAAe,I,EAanB1B,OAAS,SAAC2B,GACN,IAAMC,EAAoB,EAAKH,MAAMpB,MAAMwB,QAAO,SAACtB,GAC/C,GAAGA,EAASY,KAAKW,SAASH,KAAUpB,EAASQ,KAAKC,MAAQ,IAAMT,EAASQ,KAAKE,MAAMa,SAASH,IAASpB,EAASW,MAAMY,SAASH,GAC1H,OAAOpB,KAMf,EAAKwB,SAAS,CAACL,cAAeE,K,kEAjBb,IAAD,OAChBP,IAAWW,MAAK,SAACC,GACb,EAAKF,SAAS,CAAC1B,MAAO4B,EAAIC,KAAKC,QAAST,cAAeO,EAAIC,KAAKC,e,+BAmBpE,OACI,6BACI,kBAAC,EAAD,CAAQnC,OAAQI,KAAKJ,SACrB,kBAAC,EAAD,CAAcK,MAAOD,KAAKqB,MAAMC,qB,GAhCxBU,IAAMhB,WCMfiB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.31cd3cba.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nfunction Header(props) {\n    return (\n        // more JSX in header component\n        <div>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"header-container\">\n                    <h1 className=\"display-4\">Employee Directory</h1>\n                    <p className=\"header-desc\">Search and View Employees</p>\n                </div>\n            </div>\n            {/* form group has onChange detects when value of input element is changed \n            // with each keystroke*/}\n            <form className=\"form-container\">\n            <div className=\"form-group\">\n                <label>Search by Name:<br></br></label>\n                <input className=\"form-control\" id=\"exampleFormControlInput1\" onChange={(event) => {props.search(event.target.value)}} />\n            </div>\n            <div className=\"form-group\">\n                <label>Search by Email:<br></br></label>\n                <input className=\"form-control\" id=\"exampleFormControlInput1\" onChange={(event) => {props.search(event.target.value)}} />\n            </div>    \n            <div className=\"form-group\">\n                <label>Search by Phone #:<br></br></label>\n                <input className=\"form-control\" id=\"exampleFormControlInput1\" onChange={(event) => {props.search(event.target.value)}} />\n            </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport \"../App.css\";\n\nclass EmployeeList extends Component {\n    render() {\n        return (\n            // returns table in JSX\n            <table className=\"table\">\n                <thead className=\"employee-table\">\n                    {/* sory by function - to be developed */}\n                <tr>\n                    {/* <th className=\"sort-by-column\">\n                        Name:\n                    </th>\n                    <th className=\"sort-by-column\">\n                        Email:\n                    </th>\n                    <th className=\"sort-by-column\">\n                        Phone Number:\n                    </th> */}\n                </tr>\n                </thead>\n                {/* map() method creates a new array populated with the results from data obtained */}\n                <tbody className=\"employee-data\">\n                {this.props.users.map((employee, i) => {\n                    return (\n                            <tr className=\"results\" key={i}>\n                            <td>\n                                {/* thumbnail image */}\n                                <img className=\"employee-image\" src={employee.picture.thumbnail} aria-hidden alt=\"Image\"/>\n                            </td>\n                            {/* name - first and last */}\n                            <td className=\"employee-name\">\n                                {employee.name.first + \" \" + employee.name.last}\n                            </td>\n                            <td>\n                                {/* email */}\n                                {employee.email}\n                            </td>\n                            <td>\n                                {/* phone */}\n                                {employee.cell}\n                            </td>\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default EmployeeList;","import axios from \"axios\";\n\nconst url = \"https://randomuser.me/api/?results=50\"\n\nfunction getUsers() {\n    return axios.get(url);\n}\n\nexport default getUsers;","import React from \"react\";\nimport Header from \"./Header\";\nimport EmployeeList from \"./EmployeeList\";\nimport getUsers from \"../utils/API\";\n\n// container fetches data and renders cooresponding subcomponent\nclass Container extends React.Component {\n    state = {\n        users: [],\n        filteredUsers: []\n    }\n\n    // component mounts when it is created and first inserted into the DOM \n    // i.e when it is rendered for the first time\n    componentDidMount() {\n        getUsers().then((res) => {\n            this.setState({users: res.data.results, filteredUsers: res.data.results})\n        })\n    }\n\n    // defining function to search employees by checking whether or not property searched for is\n    // included in the array of data\n    search = (term) => {\n        const filteredEmployees = this.state.users.filter((employee) => {\n            if(employee.cell.includes(term) || (employee.name.first + \" \" + employee.name.last).includes(term) || employee.email.includes(term)) {\n                return employee\n            }\n        });\n        // passing an object to setState(). \n        // the object contains the part of the state we want to update \n        // which = the value of filteredUsers\n        this.setState({filteredUsers: filteredEmployees});\n    }\n    // renders components to the dom using props\n    render() {\n        return (\n            <div>\n                <Header search={this.search} />\n                <EmployeeList users={this.state.filteredUsers}/>\n            </div>\n        )\n    }\n}\n\nexport default Container;","import React from \"react\";\nimport Container from \"./components/Container.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Container/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}